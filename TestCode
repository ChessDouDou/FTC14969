/* Copyright (c) 2017 FIRST. All rights reserved.
 */
package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.Range;
import org.firstinspires.ftc.robotcontroller.external.samples.HardwarePushbot;
/**
 * This OpMode uses the common Pushbot hardware class to define the devices on the robot.
 * All device access is managed through the HardwarePushbot class.
 * The code is structured as a LinearOpMode
 *
 * This particular OpMode executes a POV Game style Teleop for a PushBot
 * In this mode the left stick moves the robot FWD and back, the Right stick turns left and right.
 * It raises and lowers the claw using the Gampad Y and A buttons respectively.
 * It also opens and closes the claws slowly using the left and right Bumper buttons.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */
@TeleOp(name="TestCode", group="Pushbot")
//@Disabled
public class TestCode extends LinearOpMode {
    /* Declare OpMode members. */
    HardwareDrive robot           = new HardwareDrive();   // Use a HardwareDrive's hardware

    // could also use HardwarePushbotMatrix class.
    @Override
    public void runOpMode() {
        robot.init(hardwareMap);
        // Send telemetry message to signify robot waiting;
        telemetry.addData("Say", "no u");    //
        telemetry.update();



        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {
            double r = Math.hypot(gamepad1.left_stick_y, gamepad1.left_stick_x);
            double robotAngle = Math.atan2(gamepad1.left_stick_x, gamepad1.left_stick_y) - Math.PI / 4;
            double rightX = -gamepad1.right_stick_x * 0.6;
            final double v1 = -1 * (r * Math.cos(robotAngle) + rightX);
            final double v2 = r * Math.sin(robotAngle) + rightX;
            final double v3 = r * Math.sin(robotAngle) - rightX;
            final double v4 = -1 * (r * Math.cos(robotAngle) - rightX);

            robot.FLMotor.setPower(v1 * 0.9);
            robot.FRMotor.setPower(v2 * 0.9);
            robot.BLMotor.setPower(v3 * 0.9);
            robot.BRMotor.setPower(v4 * 0.9);

            double lift = -gamepad2.right_stick_y;
            double sweep_up = gamepad2.right_trigger;
            double sweep_down = gamepad2.left_trigger;
            double flap = gamepad2.left_stick_y;
            double arm = gamepad2.right_stick_x;
            robot.flap.setPower(-flap * 0.8);
            robot.arm.setPower(arm * 0.55);
            robot.lift.setPower(lift);
            if (sweep_up > sweep_down)
                robot.sweep.setPower(sweep_up);
            else
                robot.sweep.setPower(-sweep_down);

            // if left bumper is pressed
/*
            if (gamepad2.x) {
                robot.lift.setPower(0.5);
                sleep(5000);
                robot.lift.setPower(0);
                robot.arm.setPower(-0.5);
                sleep(2000);
                robot.arm.setPower(0);

                //if right bumper is pressed
            }
            if (gamepad2.y) {
                robot.arm.setPower(0.5);
                sleep(2000);
                robot.arm.setPower(0);
                robot.lift.setPower(-0.5);
                sleep(5000);
                robot.lift.setPower(0)
            }*/
        }
    }
}
